{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = \"http://localhost:8080/main-panel/meals\";\n  }\n  getUsers() {\n    const headers = {\n      'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJVc2VyIERldGFpbHMiLCJyb2xlcyI6IlJPTEVfQURNSU4iLCJpc3MiOiJyZXN0YXVyYW50X21hbmFnZXIiLCJpYXQiOjE2Nzk3MzgwOTQsImVtYWlsIjoiYWJjQGFiYy5jb20ifQ.TM4tL95v5UxuNsjGLNhI1K8xmTyb3ToKz19Y7xCBX6o'\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headers)\n    };\n    return this.httpClient.get(this.baseUrl, requestOptions);\n  }\n}\nRestService.ɵfac = function RestService_Factory(t) {\n  return new (t || RestService)(i0.ɵɵinject(i1.HttpClient));\n};\nRestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RestService,\n  factory: RestService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;AAM5D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAFvB,YAAO,GAAG,wCAAwC;EAGzD;EAEOC,QAAQ;IACb,MAAMC,OAAO,GAAG;MACd,eAAe,EAAE;KAElB;IACD,MAAMC,cAAc,GAAG;MACrBD,OAAO,EAAE,IAAIL,WAAW,CAACK,OAAO;KACjC;IACD,OAAO,IAAI,CAACF,UAAU,CAACI,GAAG,CAAC,IAAI,CAACC,OAAO,EAAEF,cAAc,CAAC;EAC1D;;AAhBWL,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAQ,SAAXR,WAAW;EAAAS,YAFV;AAAM","names":["HttpHeaders","RestService","constructor","httpClient","getUsers","headers","requestOptions","get","baseUrl","factory","providedIn"],"sourceRoot":"","sources":["/home/pkocur/IdeaProjects/restaurant-manager-frontend/restaurant-manager-frontend/src/app/service/rest.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestService {\n\n  public baseUrl = \"http://localhost:8080/main-panel/meals\";\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  public getUsers(): Observable<any> {\n    const headers = {\n      'Authorization': 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJVc2VyIERldGFpbHMiLCJyb2xlcyI6IlJPTEVfQURNSU4iLCJpc3MiOiJyZXN0YXVyYW50X21hbmFnZXIiLCJpYXQiOjE2Nzk3MzgwOTQsImVtYWlsIjoiYWJjQGFiYy5jb20ifQ.TM4tL95v5UxuNsjGLNhI1K8xmTyb3ToKz19Y7xCBX6o',\n\n    }\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n    };\n    return this.httpClient.get(this.baseUrl, requestOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}