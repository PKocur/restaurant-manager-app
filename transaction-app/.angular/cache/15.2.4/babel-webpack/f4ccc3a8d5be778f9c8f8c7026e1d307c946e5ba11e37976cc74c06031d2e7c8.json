{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { Constants } from \"../common/Constants\";\nimport { AuthorizationUtil } from \"../common/AuthorizationUtil\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthorizationService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  logIn(loginForm) {\n    const headers = {\n      observe: 'response'\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response'\n    };\n    return this.httpClient.post(Constants.API_ENDPOINT + \"users/login\", loginForm, requestOptions);\n  }\n  handleSuccessfulLogin(body) {\n    localStorage.setItem(\"bearerToken\", body.jwtToken);\n  }\n  validateAccess(token) {\n    return AuthorizationUtil.validateUserRoleForApp(token, Constants.ROLE_ADMIN);\n  }\n  logOut() {\n    localStorage.removeItem(\"bearerToken\");\n  }\n  isLoggedIn() {\n    const bearerToken = AuthorizationUtil.getBearerToken();\n    return bearerToken != null && bearerToken.length != 0;\n  }\n}\nAuthorizationService.ɵfac = function AuthorizationService_Factory(t) {\n  return new (t || AuthorizationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthorizationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizationService,\n  factory: AuthorizationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAoBA,WAAW,QAAO,sBAAsB;AAE5D,SAAQC,SAAS,QAAO,qBAAqB;AAC7C,SAAQC,iBAAiB,QAAO,6BAA6B;;;AAK7D,OAAM,MAAOC,oBAAoB;EAE/BC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAC9B;EAEOC,KAAK,CAACC,SAAoB;IAC/B,MAAMC,OAAO,GAAG;MACdC,OAAO,EAAE;KACV;IACD,MAAMC,cAAc,GAAG;MACrBF,OAAO,EAAE,IAAIR,WAAW,CAACQ,OAAO,CAAC;MACjCC,OAAO,EAAE;KACV;IACD,OAAO,IAAI,CAACJ,UAAU,CAACM,IAAI,CAACV,SAAS,CAACW,YAAY,GAAG,aAAa,EAAEL,SAAS,EAAEG,cAAc,CAAC;EAChG;EAEOG,qBAAqB,CAACC,IAAS;IACpCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,QAAQ,CAAC;EACpD;EAEOC,cAAc,CAACC,KAAa;IACjC,OAAOjB,iBAAiB,CAACkB,sBAAsB,CAACD,KAAK,EAAElB,SAAS,CAACoB,UAAU,CAAC;EAC9E;EAEOC,MAAM;IACXP,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;EACxC;EAEOC,UAAU;IACf,MAAMC,WAAW,GAAkBvB,iBAAiB,CAACwB,cAAc,EAAE;IACrE,OAAOD,WAAW,IAAI,IAAI,IAAIA,WAAW,CAACE,MAAM,IAAI,CAAC;EACvD;;AA/BWxB,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAyB,SAApBzB,oBAAoB;EAAA0B,YAFnB;AAAM","names":["HttpHeaders","Constants","AuthorizationUtil","AuthorizationService","constructor","httpClient","logIn","loginForm","headers","observe","requestOptions","post","API_ENDPOINT","handleSuccessfulLogin","body","localStorage","setItem","jwtToken","validateAccess","token","validateUserRoleForApp","ROLE_ADMIN","logOut","removeItem","isLoggedIn","bearerToken","getBearerToken","length","factory","providedIn"],"sourceRoot":"","sources":["/home/pkocur/IdeaProjects/restaurant-manager-frontend/transaction-app/src/app/service/authorization.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {LoginForm} from \"../model/loginForm\";\nimport {Constants} from \"../common/Constants\";\nimport {AuthorizationUtil} from \"../common/AuthorizationUtil\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationService {\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  public logIn(loginForm: LoginForm): Observable<any> {\n    const headers = {\n      observe: 'response'\n    }\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response' as 'body'\n    };\n    return this.httpClient.post(Constants.API_ENDPOINT + \"users/login\", loginForm, requestOptions);\n  }\n\n  public handleSuccessfulLogin(body: any): void {\n    localStorage.setItem(\"bearerToken\", body.jwtToken)\n  }\n\n  public validateAccess(token: string): boolean {\n    return AuthorizationUtil.validateUserRoleForApp(token, Constants.ROLE_ADMIN)\n  }\n\n  public logOut() {\n    localStorage.removeItem(\"bearerToken\")\n  }\n\n  public isLoggedIn(): boolean {\n    const bearerToken: string | null = AuthorizationUtil.getBearerToken()\n    return bearerToken != null && bearerToken.length != 0\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
