{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { Constants } from \"../common/Constants\";\nimport { AuthorizationUtil } from \"../common/AuthorizationUtil\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CustomerServiceManager {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.mealsUrl = Constants.MAIN_PANEL_API_ENDPOINT + 'meals';\n  }\n  getMeals() {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headers)\n    };\n    return this.httpClient.get(this.mealsUrl, requestOptions);\n  }\n  getMeal(mealId) {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headers)\n    };\n    return this.httpClient.get(this.mealsUrl + \"/\" + mealId, requestOptions);\n  }\n  addMeal(meal) {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response'\n    };\n    return this.httpClient.post(this.mealsUrl, meal, requestOptions);\n  }\n  editMeal(mealId, meal) {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response'\n    };\n    return this.httpClient.put(this.mealsUrl + \"/\" + mealId, meal, requestOptions);\n  }\n  removeMeal(id) {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken()\n    };\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response'\n    };\n    return this.httpClient.delete(this.mealsUrl + \"/\" + id, requestOptions);\n  }\n}\nCustomerServiceManager.ɵfac = function CustomerServiceManager_Factory(t) {\n  return new (t || CustomerServiceManager)(i0.ɵɵinject(i1.HttpClient));\n};\nCustomerServiceManager.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomerServiceManager,\n  factory: CustomerServiceManager.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;AAG5D,SAAQC,SAAS,QAAO,qBAAqB;AAC7C,SAAQC,iBAAiB,QAAO,6BAA6B;;;AAK7D,OAAM,MAAOC,sBAAsB;EAGjCC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAFvB,aAAQ,GAAGJ,SAAS,CAACK,uBAAuB,GAAG,OAAO;EAG7D;EAEOC,QAAQ;IACb,MAAMC,OAAO,GAAG;MACd,eAAe,EAAE,SAAS,GAAGN,iBAAiB,CAACO,cAAc,EAAE;MAC/DC,OAAO,EAAE;KACV;IACD,MAAMC,cAAc,GAAG;MACrBH,OAAO,EAAE,IAAIR,WAAW,CAACQ,OAAO;KACjC;IACD,OAAO,IAAI,CAACH,UAAU,CAACO,GAAG,CAAS,IAAI,CAACC,QAAQ,EAAEF,cAAc,CAAC;EACnE;EAEOG,OAAO,CAACC,MAAc;IAC3B,MAAMP,OAAO,GAAG;MACd,eAAe,EAAE,SAAS,GAAGN,iBAAiB,CAACO,cAAc,EAAE;MAC/DC,OAAO,EAAE;KACV;IACD,MAAMC,cAAc,GAAG;MACrBH,OAAO,EAAE,IAAIR,WAAW,CAACQ,OAAO;KACjC;IACD,OAAO,IAAI,CAACH,UAAU,CAACO,GAAG,CAAO,IAAI,CAACC,QAAQ,GAAG,GAAG,GAAGE,MAAM,EAAEJ,cAAc,CAAC;EAChF;EAEOK,OAAO,CAACC,IAAmB;IAChC,MAAMT,OAAO,GAAG;MACd,eAAe,EAAE,SAAS,GAAGN,iBAAiB,CAACO,cAAc,EAAE;MAC/DC,OAAO,EAAE;KACV;IACD,MAAMC,cAAc,GAAG;MACrBH,OAAO,EAAE,IAAIR,WAAW,CAACQ,OAAO,CAAC;MACjCE,OAAO,EAAE;KACV;IACD,OAAO,IAAI,CAACL,UAAU,CAACa,IAAI,CAAC,IAAI,CAACL,QAAQ,EAAEI,IAAI,EAAEN,cAAc,CAAC;EAClE;EAEOQ,QAAQ,CAACJ,MAAc,EAAEE,IAAmB;IACjD,MAAMT,OAAO,GAAG;MACd,eAAe,EAAE,SAAS,GAAGN,iBAAiB,CAACO,cAAc,EAAE;MAC/DC,OAAO,EAAE;KACV;IACD,MAAMC,cAAc,GAAG;MACrBH,OAAO,EAAE,IAAIR,WAAW,CAACQ,OAAO,CAAC;MACjCE,OAAO,EAAE;KACV;IACD,OAAO,IAAI,CAACL,UAAU,CAACe,GAAG,CAAC,IAAI,CAACP,QAAQ,GAAG,GAAG,GAAGE,MAAM,EAAEE,IAAI,EAAEN,cAAc,CAAC;EAChF;EAEOU,UAAU,CAACC,EAAU;IAC1B,MAAMd,OAAO,GAAG;MACd,eAAe,EAAE,SAAS,GAAGN,iBAAiB,CAACO,cAAc;KAC9D;IACD,MAAME,cAAc,GAAG;MACrBH,OAAO,EAAE,IAAIR,WAAW,CAACQ,OAAO,CAAC;MACjCE,OAAO,EAAE;KACV;IACD,OAAO,IAAI,CAACL,UAAU,CAACkB,MAAM,CAAC,IAAI,CAACV,QAAQ,GAAG,GAAG,GAAGS,EAAE,EAAEX,cAAc,CAAC;EACzE;;AA7DWR,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAqB,SAAtBrB,sBAAsB;EAAAsB,YAFrB;AAAM","names":["HttpHeaders","Constants","AuthorizationUtil","CustomerServiceManager","constructor","httpClient","MAIN_PANEL_API_ENDPOINT","getMeals","headers","getBearerToken","observe","requestOptions","get","mealsUrl","getMeal","mealId","addMeal","meal","post","editMeal","put","removeMeal","id","delete","factory","providedIn"],"sourceRoot":"","sources":["/home/pkocur/IdeaProjects/restaurant-manager-frontend/transaction-app/src/app/service/customer-service-manager.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {Meal} from \"../model/meal\";\nimport {Constants} from \"../common/Constants\";\nimport {AuthorizationUtil} from \"../common/AuthorizationUtil\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerServiceManager {\n  public mealsUrl = Constants.MAIN_PANEL_API_ENDPOINT + 'meals';\n\n  constructor(private httpClient: HttpClient) {\n  }\n\n  public getMeals(): Observable<Meal[]> {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    }\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n    };\n    return this.httpClient.get<Meal[]>(this.mealsUrl, requestOptions);\n  }\n\n  public getMeal(mealId: number): Observable<Meal> {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    }\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n    };\n    return this.httpClient.get<Meal>(this.mealsUrl + \"/\" + mealId, requestOptions);\n  }\n\n  public addMeal(meal: Partial<Meal>): Observable<any> {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    }\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response' as 'body'\n    };\n    return this.httpClient.post(this.mealsUrl, meal, requestOptions);\n  }\n\n  public editMeal(mealId: number, meal: Partial<Meal>): Observable<any> {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken(),\n      observe: 'response'\n    }\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response' as 'body'\n    };\n    return this.httpClient.put(this.mealsUrl + \"/\" + mealId, meal, requestOptions);\n  }\n\n  public removeMeal(id: number): Observable<any> {\n    const headers = {\n      'Authorization': 'Bearer ' + AuthorizationUtil.getBearerToken()\n    }\n    const requestOptions = {\n      headers: new HttpHeaders(headers),\n      observe: 'response' as 'body'\n    };\n    return this.httpClient.delete(this.mealsUrl + \"/\" + id, requestOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
