{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/authorization.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(authorizationService, formBuilder, router) {\n    this.authorizationService = authorizationService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.loginFormFromView = this.formBuilder.group({\n      email: '',\n      password: ''\n    });\n  }\n  onLoginFormSubmit() {\n    this.logIn({\n      \"email\": this.loginFormFromView.value.email,\n      \"password\": this.loginFormFromView.value.password\n    });\n    this.loginFormFromView.reset();\n  }\n  logIn(loginForm) {\n    this.authorizationService.logIn(loginForm).subscribe(result => {\n      if (this.authorizationService.validateAccess(result.body.jwtToken)) {\n        this.authorizationService.handleSuccessfulLogin(result.body);\n        this.router.navigate(['']);\n      } else {\n        window.alert(\"Insufficient privileges.\");\n      }\n    }, error => {\n      if (error.status === 401) {\n        window.alert(\"Invalid credentials.\");\n      } else {\n        window.alert(\"Other error.\");\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizationService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 12,\n  vars: 2,\n  consts: [[1, \"row\"], [1, \"offset-3\", \"col-6\", \"text-center\", \"mt-5\"], [3, \"noValidate\", \"formGroup\", \"ngSubmit\"], [\"for\", \"email\", 1, \"my-3\", \"fs-4\"], [\"id\", \"email\", \"type\", \"text\", \"placeholder\", \"Enter email\", \"required\", \"\", \"minlength\", \"3\", \"maxlength\", \"50\", \"formControlName\", \"email\", 1, \"form-control\"], [1, \"form-group\"], [\"for\", \"password\", 1, \"my-3\", \"fs-4\"], [\"id\", \"password\", \"type\", \"password\", \"placeholder\", \"Enter password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"my-3\", \"btn\", \"btn-primary\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onLoginFormSubmit();\n      });\n      i0.ɵɵelementStart(3, \"label\", 3);\n      i0.ɵɵtext(4, \" Email \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 4);\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \" Password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 8);\n      i0.ɵɵtext(11, \" Log in \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"noValidate\", false)(\"formGroup\", ctx.loginFormFromView);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.MinLengthValidator, i2.MaxLengthValidator, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;AAcA,OAAM,MAAOA,cAAc;EAOzBC,YAAoBC,oBAA0C,EAC1CC,WAAwB,EACzBC,MAAc;IAFb,yBAAoB,GAApBF,oBAAoB;IACpB,gBAAW,GAAXC,WAAW;IACZ,WAAM,GAANC,MAAM;IAPzB,sBAAiB,GAAG,IAAI,CAACD,WAAW,CAACE,KAAK,CAAC;MACzCC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX,CAAC;EAKF;EAEAC,iBAAiB;IACf,IAAI,CAACC,KAAK,CAAC;MACT,OAAO,EAAE,IAAI,CAACC,iBAAiB,CAACC,KAAK,CAACL,KAAK;MAC3C,UAAU,EAAE,IAAI,CAACI,iBAAiB,CAACC,KAAK,CAACJ;KAC1C,CAAC;IACF,IAAI,CAACG,iBAAiB,CAACE,KAAK,EAAE;EAChC;EAEAH,KAAK,CAACI,SAAoB;IACxB,IAAI,CAACX,oBAAoB,CAACO,KAAK,CAACI,SAAS,CAAC,CAACC,SAAS,CAClDC,MAAM,IAAG;MACP,IAAI,IAAI,CAACb,oBAAoB,CAACc,cAAc,CAACD,MAAM,CAACE,IAAI,CAACC,QAAQ,CAAC,EAAE;QAClE,IAAI,CAAChB,oBAAoB,CAACiB,qBAAqB,CAACJ,MAAM,CAACE,IAAI,CAAC;QAC5D,IAAI,CAACb,MAAM,CAACgB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;OAC3B,MAAM;QACLC,MAAM,CAACC,KAAK,CAAC,0BAA0B,CAAC;;IAE5C,CAAC,EACDC,KAAK,IAAG;MACN,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxBH,MAAM,CAACC,KAAK,CAAC,sBAAsB,CAAC;OACrC,MAAM;QACLD,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;;IAEhC,CAAC,CAAC;EACN;;AArCWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCd3BC,8BAAiB;MAE8CA;QAAA,OAAYC,uBAAmB;MAAA,EAAC;MACzFD,gCAAqC;MACnCA,uBACF;MAAAA,iBAAQ;MACRA,2BAC+C;MAC/CA,8BAAwB;MAEpBA,0BACF;MAAAA,iBAAQ;MACRA,2BACmC;MACrCA,iBAAM;MACNA,kCAAmD;MACjDA,yBACF;MAAAA,iBAAS;;;MAfLA,eAAoB;MAApBA,kCAAoB","names":["LoginComponent","constructor","authorizationService","formBuilder","router","group","email","password","onLoginFormSubmit","logIn","loginFormFromView","value","reset","loginForm","subscribe","result","validateAccess","body","jwtToken","handleSuccessfulLogin","navigate","window","alert","error","status","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/pkocur/IdeaProjects/restaurant-manager-frontend/transaction-app/src/app/component/login/login.component.ts","/home/pkocur/IdeaProjects/restaurant-manager-frontend/transaction-app/src/app/component/login/login.component.html"],"sourcesContent":["import {Component} from '@angular/core';\nimport {CustomerServiceManager} from \"../../service/customer-service-manager.service\";\nimport {FormBuilder} from \"@angular/forms\";\nimport {AuthorizationService} from \"../../service/authorization.service\";\nimport {Meal} from \"../../model/meal\";\nimport {LoginForm} from \"../../model/loginForm\";\nimport {Router} from \"@angular/router\";\nimport {AuthorizationUtil} from \"../../common/AuthorizationUtil\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  loginFormFromView = this.formBuilder.group({\n    email: '',\n    password: ''\n  });\n\n  constructor(private authorizationService: AuthorizationService,\n              private formBuilder: FormBuilder,\n              public router: Router) {\n  }\n\n  onLoginFormSubmit() {\n    this.logIn({\n      \"email\": this.loginFormFromView.value.email,\n      \"password\": this.loginFormFromView.value.password\n    })\n    this.loginFormFromView.reset();\n  }\n\n  logIn(loginForm: LoginForm) {\n    this.authorizationService.logIn(loginForm).subscribe(\n      result => {\n        if (this.authorizationService.validateAccess(result.body.jwtToken)) {\n          this.authorizationService.handleSuccessfulLogin(result.body)\n          this.router.navigate([''])\n        } else {\n          window.alert(\"Insufficient privileges.\");\n        }\n      },\n      error => {\n        if (error.status === 401) {\n          window.alert(\"Invalid credentials.\");\n        } else {\n          window.alert(\"Other error.\");\n        }\n      });\n  }\n}\n","<div class=\"row\">\n  <div class=\"offset-3 col-6 text-center mt-5\">\n    <form [noValidate]=\"false\" [formGroup]=\"loginFormFromView\" (ngSubmit)=\"onLoginFormSubmit()\">\n      <label for=\"email\" class=\"my-3 fs-4\">\n        Email\n      </label>\n      <input class=\"form-control\" id=\"email\" type=\"text\" placeholder=\"Enter email\" required minlength=\"3\"\n             maxlength=\"50\" formControlName=\"email\"/>\n      <div class=\"form-group\">\n        <label for=\"password\" class=\"my-3 fs-4\">\n          Password\n        </label>\n        <input class=\"form-control\" id=\"password\" type=\"password\" placeholder=\"Enter password\"\n               formControlName=\"password\"/>\n      </div>\n      <button type=\"submit\" class=\"my-3 btn btn-primary\">\n        Log in\n      </button>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
