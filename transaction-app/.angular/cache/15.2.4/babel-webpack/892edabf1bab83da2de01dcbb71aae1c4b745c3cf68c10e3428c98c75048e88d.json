{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/authorization.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthorizationGuard {\n  constructor(authorizationService, router) {\n    this.authorizationService = authorizationService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (!this.authorizationService.isLoggedIn()) {\n      window.alert(\"Access not allowed!\");\n      this.router.navigate(['login']);\n    }\n    return true;\n  }\n}\nAuthorizationGuard.ɵfac = function AuthorizationGuard_Factory(t) {\n  return new (t || AuthorizationGuard)(i0.ɵɵinject(i1.AuthorizationService), i0.ɵɵinject(i2.Router));\n};\nAuthorizationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizationGuard,\n  factory: AuthorizationGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,kBAAkB;EAE7BC,YAAmBC,oBAA0C,EAC1CC,MAAc;IADd,yBAAoB,GAApBD,oBAAoB;IACpB,WAAM,GAANC,MAAM;EACzB;EAEAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,IAAI,CAAC,IAAI,CAACJ,oBAAoB,CAACK,UAAU,EAAE,EAAE;MAC3CC,MAAM,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACnC,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;IAEjC,OAAO,IAAI;EACb;;AAdWV,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAW,SAAlBX,kBAAkB;EAAAY,YAFjB;AAAM","names":["AuthorizationGuard","constructor","authorizationService","router","canActivate","route","state","isLoggedIn","window","alert","navigate","factory","providedIn"],"sourceRoot":"","sources":["/home/pkocur/IdeaProjects/restaurant-manager-frontend/transaction-app/src/app/common/authorization-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {AuthorizationService} from \"../service/authorization.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationGuard implements CanActivate {\n\n  constructor(public authorizationService: AuthorizationService,\n              public router: Router) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (!this.authorizationService.isLoggedIn()) {\n      window.alert(\"Access not allowed!\");\n      this.router.navigate(['login'])\n    }\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
